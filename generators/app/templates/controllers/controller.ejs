import I<%= modelName %>Service from "@interfaces/service/I<%= modelName %>Service";
import I<%= modelName %> from "@models/entities/<%= modelName %>";
import { <%= modelName %>ServiceImpl } from "@service/<%= modelName %>ServiceImpl";
import { Controller, Get, Route, Query, Delete, Put, Body, Post } from 'tsoa';
import { ProvideSingleton, inject } from '@ioc/ioc';

/**
* Controller <%= modelName %>Controller
*/
@Route('/<%= modelVar %>')
@ProvideSingleton(<%= modelName %>Controller)
export class <%= modelName %>Controller extends Controller {

  constructor(@inject(<%= modelName %>ServiceImpl) private <%= modelVar %>Service: I<%= modelName %>Service) {
		super();
	}

  @Post('/save')
  public async save<%= modelName %>(@Body() <%= modelVar %>: I<%= modelName %>): Promise<I<%= modelName %>> {
    //Do some business logic...
    try {
			return await this.<%= modelVar %>Service.save<%= modelName %>(<%= modelVar %>);
		} catch {
			return Promise.reject();
		}
  }


  @Get('/getById')
  public async get<%= modelName %>ById(@Query() id: string): Promise<I<%= modelName %>>  {
    //Do some business logic...
    try {
			return await this.<%= modelVar %>Service.get<%= modelName %>ById(id);
		} catch {
			return Promise.reject();
		}
  }


  @Get('/getAll')
  public async getAll(): Promise<I<%= modelName %>[]>  {
    //Do some business logic...
    try {
      return await this.<%= modelVar %>Service.getAll();
    } catch {
      return Promise.reject();
    }
  }

  @Delete('/deleteById')
  public async delete<%= modelName %>ById(@Query() id: string): Promise<I<%= modelName %>>  {
    try {
			return await this.<%= modelVar %>Service.delete<%= modelName %>ById(id);
		} catch {
			return Promise.reject();
		}
  }


  @Put('/update')
  public async update<%= modelName %>(@Body() <%= modelVar %>: I<%= modelName %>): Promise<I<%= modelName %>> {

    //Do some business logic...
    try {
			return await this.<%= modelVar %>Service.update<%= modelName %>(<%= modelVar %>);
		} catch {
			return Promise.reject();
		}
  }
}
